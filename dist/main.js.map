{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/Exceptions/404/404-not-found.component.ts","./src/app/Exceptions/404/404-not-found.component.html","./src/app/account/account-info/account-info.component.ts","./src/app/account/account-info/account-info.component.html","./src/app/account/account.component.ts","./src/app/account/account.component.html","./src/app/account/account.service.ts","./src/app/account/change-email-form/change-email-form.component.ts","./src/app/account/change-email-form/change-email-form.component.html","./src/app/account/password-info-form/password-info-form.component.ts","./src/app/account/password-info-form/password-info-form.component.html","./src/app/account/personal-info-form/personal-info-form.component.ts","./src/app/account/personal-info-form/personal-info-form.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/header-interceptor.interceptor.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/login/auth-guard.service.ts","./src/app/login/forgot-password/forgot-password.component.ts","./src/app/login/forgot-password/forgot-password.component.html","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/register/register.component.ts","./src/app/login/register/register.component.html","./src/app/message/message-box-header/message-box-header.component.ts","./src/app/message/message-box-header/message-box-header.component.html","./src/app/message/message-box/message-box.component.ts","./src/app/message/message-box/message-box.component.html","./src/app/message/message.component.ts","./src/app/message/message.component.html","./src/app/message/message.service.ts","./src/app/nav-menu/nav-menu.component.ts","./src/app/nav-menu/nav-menu.component.html","./src/app/people-page/people-page.component.ts","./src/app/people-page/people-page.component.html","./src/app/post/create-post/create-post.component.ts","./src/app/post/create-post/create-post.component.html","./src/app/post/post-item/post-item.component.ts","./src/app/post/post-item/post-item.component.html","./src/app/post/post.component.ts","./src/app/post/post.component.html","./src/app/post/post.service.ts","./src/app/shared/auth.service.ts","./src/app/shared/components/comments-section/comment-section.component.ts","./src/app/shared/components/comments-section/comment-section.component.html","./src/app/shared/components/confirmation-modal/confirmation-modal.component.ts","./src/app/shared/components/confirmation-modal/confirmation-modal.component.html","./src/app/shared/components/error-banner/error-banner.component.ts","./src/app/shared/components/error-banner/error-banner.component.html","./src/app/shared/components/footer/footer.component.ts","./src/app/shared/components/footer/footer.component.html","./src/app/shared/components/manage-message-modal/manage-message-modal.component.ts","./src/app/shared/components/manage-message-modal/manage-message-modal.component.html","./src/app/shared/components/manage-user-modal/manage-user-modal.component.ts","./src/app/shared/components/manage-user-modal/manage-user-modal.component.html","./src/app/shared/components/searcbar/search-bar.component.ts","./src/app/shared/components/searcbar/search-bar.component.html","./src/app/shared/components/sidebar-user/sidebar-user.component.ts","./src/app/shared/components/sidebar-user/sidebar-user.component.html","./src/app/shared/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component} from \"@angular/core\";\n\n@Component({\n    selector: 'app-404',\n    templateUrl: './404-not-found.component.html',\n})\n\nexport class NotFoundComponent{}","<h1>Sorry, this page was not found</h1>","import { Component, OnInit, Input } from '@angular/core';\nimport { AuthService } from 'src/app/shared/auth.service';\nimport { CurrentUser } from 'src/app/shared/interface.model';\n\n@Component({\n    selector: 'app-account-info',\n    templateUrl: './account-info.component.html',\n    styleUrls: ['./account-info.component.scss']\n})\n\n\nexport class AccountInfoComponent implements OnInit {\n\n    @Input() public currentUser: CurrentUser | null;\n\n    constructor(){}\n\n    public ngOnInit(): void{ \n        if(!this.currentUser){\n            console.error(\"Account-Info no user\");\n        }\n    }\n\n}","<div class=\"wrapper\">\n    <h2>Welcome {{currentUser?.user_name}}!</h2>\n    \n    <div class=\"container\">\n        <div class=\"section-1\">\n            <img class=\"pp\" src=\"assets/default-avatar.png\" alt=\"profile-picture\">\n        </div>\n        <a class=\"divider\"></a>\n        <div class=\"section-2\">\n            <h3>Other stuff</h3>\n\n            <p>Firstname: {{currentUser?.first_name}}</p>\n            <p>Surname: {{currentUser?.sur_name}}</p>\n            <p>Email: {{currentUser?.email}}</p>\n            <p>Phonenumber: {{currentUser?.phonenumber}}</p>\n            <p>Last online: {{currentUser?.lastOnline}}</p>\n        </div>    \n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { AuthService } from \"../shared/auth.service\";\nimport { CurrentUser, ErrorBannerEvent } from \"../shared/interface.model\";\n\n@Component({\n    selector: 'app-account',\n    templateUrl: './account.component.html',\n    styleUrls: ['./account.component.scss']\n})\n\nexport class AccountComponent implements OnInit {\n    public currentUser: CurrentUser | null; \n    public showBanner: boolean = false;\n\n    public error_message: string;\n    public error_type: string;\n    public error_status: number;\n\n    public constructor(private readonly authService: AuthService){}\n\n    public ngOnInit(): void{\n        this.currentUser = this.authService.currentUser ?? null;\n        if(!this.currentUser){\n            console.error('Current user does not exist');\n        }\n    }\n\n    public showBannerMessage($event: ErrorBannerEvent){\n        this.error_message = $event.message\n        this.error_type = $event.type;\n        this.error_status = $event.status;\n        this.showBanner = true;\n\n    }\n}","<div class=\"wrapper\">\n    <h2 id=\"top\">Account</h2>\n    <app-error-banner\n        *ngIf=\"showBanner\"\n        [error_message]=\"error_message\"\n        [error_status]=\"error_status\"\n        [error_type]=\"error_type\"></app-error-banner>\n    <app-account-info [currentUser]=\"currentUser\"></app-account-info>\n    <div class=\"update-container\">\n\n        <app-personal-info-form class=\"personal\" [currentUser]=\"currentUser\"></app-personal-info-form>\n        \n        \n        <div class=\"other-info\">\n            <app-password-info-form class=\"password\" [currentUser]=\"currentUser\"></app-password-info-form>\n            <app-change-email-form \n                class=\"email\" \n                [currentUser]=\"currentUser\"\n                (emitBannerMessage)=\"showBannerMessage($event)\"></app-change-email-form>\n        </div>  \n        \n        <!-- <app-confirmation-modal></app-confirmation-modal> -->\n        \n    </div>\n</div>","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\nimport { Observable } from \"rxjs\";\nimport { AccountUpdate, EmailUpdate, ApiResponse } from \"../shared/interface.model\";\n\n@Injectable({providedIn: 'root'})\n\nexport class AccountService{\n\n    public routePrefix: string = environment.php_api_url;\n    constructor(private http: HttpClient){}\n\n    public checkOldPassword(postData:{oldPassword: string, id: number}): Observable<any>{\n        return this.http.post(this.routePrefix + \"account/check-old-password\", postData);\n    }\n\n    public updateAccountDetails(postData: any){\n        return this.http.post(this.routePrefix + 'account/update-account-details', postData);\n    }\n    \n    public updatePassword(postData: {password: string, id:number|undefined}): Observable<any>{\n        return this.http.post(this.routePrefix + 'account/update-password', postData);\n    }\n\n    public updateEmail(postData: EmailUpdate ): Observable<object>{\n        return this.http.post(this.routePrefix + 'account/update-email', postData);\n    }\n\n    \n\n}","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { CurrentUser } from \"src/app/shared/interface.model\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { EmailUpdate, ApiResponse, ErrorBannerEvent } from \"src/app/shared/interface.model\";\nimport { AccountService } from \"../account.service\";\n\n@Component({\n    selector: 'app-change-email-form',\n    templateUrl: './change-email-form.component.html',\n    styleUrls: ['./change-email-form.component.scss'],\n})\n\n\nexport class ChangeEmailFormComponent implements OnInit{\n\n    @Input() public currentUser: CurrentUser | null;\n\n    public changeEmailForm: FormGroup;\n\n    @Output() public emitBannerMessage:EventEmitter<ErrorBannerEvent> = new EventEmitter();\n\n    constructor(\n        private readonly fb: FormBuilder, \n        private readonly accountService: AccountService){}\n\n    public ngOnInit(): void{ \n        if(!this.currentUser){\n            console.error('No User');\n        }\n        this.initForm();\n    }\n\n    private initForm(): void{ \n        this.changeEmailForm = this.fb.group({\n            email: ['', Validators.required],\n            confirmEmail: ['', Validators.required],\n        })\n    }\n\n    public submitEmailForm(): void{\n        if(this.changeEmailForm.valid){ return; }\n\n        const postData: EmailUpdate = {\n            userId: this.currentUser?.id ?? -1,\n            email: this.emailVal,\n            confirmEmail: this.confirmEmailVal,\n        }\n\n        this.accountService\n            .updateEmail(postData)\n            .pipe()\n            .subscribe({\n                next: (response:any) => {\n                    if(response.status === 200){\n                        //update current user in local storage\n                        localStorage.setItem('session', JSON.stringify(response.data));\n                        //emit success message\n                        this.emitBannerMessage.emit({\n                            status: response.status,\n                            message: response.message,\n                            type: 'SUCCESS'\n                        });\n                        \n                        window.scrollTo(0,0);\n                    }\n                    this.emitBannerMessage.emit({\n                        status: response.status,\n                        message: response.message,\n                        type: 'ERROR'\n                    })\n                    window.scrollTo(0,0);\n\n                },\n                error: (response: any) =>{\n                    this.emitBannerMessage.emit({\n                        status: 400,\n                        message: 'Something went wrong',\n                        type: 'ERROR'\n                    })\n                    window.scrollTo(0,0);\n                }\n            })\n    }\n\n    public get checkEmail(): boolean{\n        return this.emailVal === this.confirmEmailVal;\n    }\n\n    public get emailVal(): string { \n        return this.changeEmailForm.controls['email'].value;\n    }\n\n    public get confirmEmailVal(): string{ \n        return this.changeEmailForm.controls['confirmEmail'].value;\n    }\n\n}","<div class=\"container\">\n    <h3>Email</h3>\n    <p>Current Email: {{currentUser?.email}}</p>\n    <form (ngSubmit)=\"submitEmailForm()\" [formGroup]=\"changeEmailForm\">\n        <div class=\"form-control\">\n            <label for=\"email\" class=\"form-label\">\n                Email\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    formControlName=\"email\">  \n            </label>\n        </div>\n        <div class=\"form-control\">\n            <label for=\"confirmEmail\" class=\"form-label\">\n                Confirm Email\n                <input \n                type=\"text\" \n                class=\"form-input\" \n                formControlName=\"confirmEmail\"\n                [class.error]=\"!checkEmail\">            \n            </label>\n        </div>\n        <button class=\"button\">Submit</button>\n    </form>\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\nimport { CurrentUser, ErrorBannerEvent } from \"src/app/shared/interface.model\";\nimport { AccountService } from \"../account.service\";\nimport { AuthService } from \"src/app/shared/auth.service\";\n\n@Component({\n    selector: 'app-password-info-form',\n    templateUrl: './password-info-form.component.html',\n    styleUrls: ['./password-info-form.component.scss']\n})\n\nexport class PasswordInfoFormComponent implements OnInit {\n\n    @Input() public currentUser: CurrentUser | null;\n    \n    public passwordInfoForm: FormGroup;\n    public passwordMismatch: boolean = false;\n    public wrongCurrentPassword: boolean = false;\n\n    @Output() public emitBannerMessage: EventEmitter<ErrorBannerEvent> = new EventEmitter();\n\n    public constructor(\n        private fb: FormBuilder,\n        private accountService: AccountService,\n        private authService: AuthService) {}\n\n    public ngOnInit(): void{\n        this.initForm();\n    }\n\n    /**\n     * Initialize change password form\n     * @returns void\n     */\n    private initForm(): void{ \n        this.passwordInfoForm = this.fb.group({\n            currentPassword: [''],\n            password: [''],\n            confirmPassword: [''],\n        })\n    }\n\n    /**\n     * Updates user password\n     * @returns void\n     */\n    private updatePassword(): void{\n        if(this.currentUser === null){\n            return;\n        }\n        const postData = { \n            password: this.passwordVal, \n            id: this.currentUser.id\n        }\n\n        this.accountService\n            .updatePassword(postData)\n            .subscribe({\n                next: (response:any) => {\n                    if(response.status === 200) {\n                        this.emitBannerMessage.emit({\n                            status: response.status,\n                            message: response.message,\n                            type: \"SUCCESS\"\n                        })\n                    }\n                    this.emitBannerMessage.emit({\n                        status: response.status,\n                        message: response.message,\n                        type: 'ERROR'\n                    });\n                    window.scrollTo(0,0)\n                }\n            });\n    }\n\n    /**\n     * Will first check users old password against inputted password then will change password\n     * @returns void\n     */\n    public submitPasswordForm(): void{ \n        if(this.passwordMismatch || this.currentUser === null){ return; }\n\n        const checkPassData = { \n            oldPassword: this.oldPasswordVal,\n            id: this.currentUser.id,\n        };\n        \n       this.accountService\n        .checkOldPassword(checkPassData)\n        .subscribe((response: any) => {\n            if(response.data){\n                this.updatePassword();\n                return;\n            }          \n            this.passwordMismatch = true;\n            this.emitBannerMessage.emit({\n                status: response.status,\n                message: response.message,\n                type: \"ERROR \"\n            })\n        });\n    }\n\n    public get checkPasswordMatch(): boolean {\n        (this.passwordVal !== this.confirmPasswordVal) ? this.passwordMismatch = true : this.passwordMismatch = false;\n        return this.passwordMismatch;\n    }\n\n    public get passwordVal(): string{\n        return this.passwordInfoForm.controls['password'].value;\n    }\n\n    public get confirmPasswordVal(): string{\n        return this.passwordInfoForm.controls['confirmPassword'].value;\n    }   \n\n    public get oldPasswordVal(): string{\n        return this.passwordInfoForm.controls['currentPassword'].value;\n    }\n\n}","<div class=\"container\">\n    <h3>Password</h3>\n    <form [formGroup]=\"passwordInfoForm\" (ngSubmit)=\"submitPasswordForm()\">\n        <!-- Current Password -->\n        <div class=\"form-control\">\n            <label for=\"currentPassword\" class=\"form-label\">\n                Current <br>\n                Password\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    formControlName=\"currentPassword\">\n            </label>\n        </div>\n\n        <!-- Password -->\n        <div class=\"form-control\">\n            <label for=\"password\" class=\"form-label\" >\n                Password\n                <input \n                    type=\"text\" \n                    class=\"form-input\"  \n                    [class.error]=\"checkPasswordMatch\"\n                    formControlName=\"password\">\n            </label>\n        </div>\n        <!-- Confirm password -->\n        <div class=\"form-control\">\n            <label for=\"confirmPassword\" class=\"form-label\">\n                Confirm <br>\n                Password\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    [class.error]=\"checkPasswordMatch\"\n                    formControlName=\"confirmPassword\">\n            </label>\n            <label for=\"mismatch\" class=\"error\" *ngIf=\"passwordMismatch\">Passwords do not match;</label>\n            <label for=\"wrongPassword\" class=\"error\" *ngIf=\"wrongCurrentPassword\">Current password is incorrect</label>\n        </div>\n        <button \n            class=\"button\" \n            type=\"submit\"\n            [class.disabled]=\"passwordMismatch\">Submit</button>\n    </form>\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { CurrentUser, ErrorBannerEvent } from \"src/app/shared/interface.model\";\nimport { AccountService } from \"../account.service\";\n\n@Component({\n    selector: 'app-personal-info-form',\n    templateUrl: './personal-info-form.component.html',\n    styleUrls: ['./personal-info-form.component.scss']\n})\n\nexport class PersonalInfoFormComponent implements OnInit {\n    \n    @Input() public currentUser: CurrentUser | null;\n\n    public personalInfoForm: FormGroup;\n\n    @Output() public emitBannerMessage: EventEmitter<ErrorBannerEvent> = new EventEmitter();\n\n\n    public constructor(private fb:FormBuilder, private accountService: AccountService){ }\n\n    public ngOnInit(): void {\n        this.initForm();\n    }\n\n    /**\n     * Initalize all form fields \n     * @returns void\n     */\n    private initForm(): void{ \n        this.personalInfoForm = this.fb.group({\n            username: [this.currentUser?.user_name ? this.currentUser.user_name : ''],\n            firstname: [this.currentUser?.first_name ? this.currentUser.first_name : ''],\n            surname: [this.currentUser?.sur_name ? this.currentUser.sur_name : ''],\n            phonenumber: [this.currentUser?.phonenumber ? this.currentUser.phonenumber : ''],\n        })\n    }\n\n    /**\n     * When the user submits the personal info form\n     * @returns void\n     */\n    public submitPersonalForm(): void{ \n        if(!this.personalInfoForm.valid){\n            return;\n        }\n\n        const postData = {\n            userId: this.currentUser?.id,\n            username: this.checkAmberChange('username') ? this.usernameVal : null,\n            firstname: this.checkAmberChange('firstname') ? this.firstnameVal : null,\n            surname: this.checkAmberChange('surname') ? this.surnameVal : null,\n            phonenumber: this.checkAmberChange('phonenumber') ? this.phonenumberVal.toString() : null,\n        };\n\n        this.accountService\n            .updateAccountDetails(postData)\n            .subscribe((response: any) => {\n                if(response.status === 200){\n                    this.emitBannerMessage.emit({\n                        status: response.status,\n                        message: response.message,\n                        type: 'SUCCESS',\n                    })\n                }\n                this.emitBannerMessage.emit({\n                    status: response.status,\n                    message: response.message,\n                    type: 'ERROR',\n                })\n            })\n    }\n    \n    /**\n     * Will check if a given, a string form control name, will return true or false\n     * if that value is the same as before\n     * @param string check \n     * @returns boolean\n     */\n    public checkGreenChange(check: string): boolean{\n        switch(check){\n            case 'username':\n                return this.usernameVal === this.currentUser?.user_name;\n            case 'firstname':\n                return this.firstnameVal === this.currentUser?.first_name;\n            case 'surname':\n                return this.surnameVal === this.currentUser?.sur_name;\n            case 'phonenumber':     \n                return this.phonenumberVal === this.currentUser?.phonenumber;\n            default:\n                return false;\n        }\n    }\n    /**\n     * Will check if a given, a string form control name, will return true or false\n     * if that value has or has not been changed in the input field\n     * @param string check \n     * @returns boolean\n     */\n    public checkAmberChange(check: string): boolean{\n        switch(check){\n            case 'username':\n                return this.usernameVal !== this.currentUser?.user_name && this.usernameVal !== '';\n            case 'firstname':\n                return this.firstnameVal !== this.currentUser?.first_name && this.firstnameVal !== '';\n            case 'surname':\n                return this.surnameVal !== this.currentUser?.sur_name && this.surnameVal !== '';\n            case 'phonenumber':     \n                return this.phonenumberVal !== this.currentUser?.phonenumber && this.phonenumberVal !== '';\n            default:\n                return false;\n        }\n    }\n    /**\n     * Will check if a given, a string form control name, will return true or false\n     * if a value has been deleted\n     * @param string check \n     * @returns boolean\n     */\n    public checkRedChange(check: string): boolean{\n        switch(check){\n            case 'username':\n                return this.usernameVal === '';\n            case 'firstname':\n                return this.firstnameVal === '';\n            case 'surname':\n                return this.surnameVal === '';\n            case 'phonenumber':     \n                return this.phonenumberVal === '';\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Returns username form control value\n     */\n    public get usernameVal(): string{\n        return this.personalInfoForm.controls['username'].value;\n    }\n    \n    /**\n    * Returns firstname form control value\n    */\n    public get firstnameVal():string{\n        return this.personalInfoForm.controls['firstname'].value;\n    }\n    \n    /**\n    * Returns surname form control value\n    */\n    public get surnameVal(): string{\n        return this.personalInfoForm.controls['surname'].value;\n    }\n\n    /**\n    * Returns phonenumber form control value\n    */\n    public get phonenumberVal(): string{\n        return this.personalInfoForm.controls['phonenumber'].value;\n    }\n}\n","<div class=\"container\">\n    <h3>Personal</h3>\n    <form class=\"personal-form\" [formGroup]=\"personalInfoForm\" (ngSubmit)=\"submitPersonalForm()\">\n        <!-- Username -->\n        <div class=\"form-control\">\n            <label for=\"username\" class=\"form-label\">\n                Username\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/inactive-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkRedChange('username')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/afk-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkAmberChange('username')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/active-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkGreenChange('username')\">\n\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    formControlName=\"username\"\n                    [class.amber]=\"checkAmberChange('username')\"\n                    [class.red]=\"checkRedChange('username')\"\n                    >\n            </label>\n        </div>\n        <!-- Firstname -->\n        <div class=\"form-control\">\n            <label for=\"firstname\" class=\"form-label\">\n                Firstname\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/inactive-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkRedChange('firstname')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/afk-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkAmberChange('firstname')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/active-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkGreenChange('firstname')\">\n\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    formControlName=\"firstname\" \n                    [class.amber]=\"checkAmberChange('firstname')\"\n                    [class.red]=\"checkRedChange('firstname')\">\n            </label>\n        </div>\n        <!-- Surname -->\n        <div class=\"form-control\">\n            <label for=\"surname\" class=\"form-label\">\n                Surname\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/inactive-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkRedChange('surname')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/afk-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkAmberChange('surname')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/active-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkGreenChange('surname')\">\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    formControlName=\"surname\" \n                    [class.amber]=\"checkAmberChange('surname')\"\n                    [class.red]=\"checkRedChange('surname')\">\n            </label>\n        </div>\n\n        <!-- Phonenumber -->\n        <div class=\"form-control\">\n            <label for=\"phonenumber\" class=\"form-label\">\n                Phonenumber\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/inactive-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkRedChange('phonenumber')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/afk-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkAmberChange('phonenumber')\">\n                <img \n                    class=\"img\" \n                    src=\"../../../assets/active-user.png\" \n                    alt=\"dot\"\n                    *ngIf=\"checkGreenChange('phonenumber')\">\n                <input \n                    type=\"text\" \n                    class=\"form-input\" \n                    formControlName=\"phonenumber\" \n                    [class.amber]=\"checkAmberChange('phonenumber')\"\n                    [class.red]=\"checkRedChange('phonenumber')\">\n            </label>\n        </div>\n        <button class=\"button\">Submit</button>\n    </form>\n</div>","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { AuthGuardService } from \"./login/auth-guard.service\";\n\n// Component imports\nimport { HomeComponent } from \"./home/home.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { MessageComponent } from \"./message/message.component\";\nimport { PeoplePageComponent } from \"./people-page/people-page.component\";\nimport { NotFoundComponent } from \"./Exceptions/404/404-not-found.component\";\nimport { AccountComponent } from \"./account/account.component\";\n\nconst routes: Routes = [\n     //TODO: replace routes with routing component\n     { path: 'login', component: LoginComponent, pathMatch: 'full' },\n     { path: 'account', component: AccountComponent, pathMatch: 'full'},\n     { path: 'message', component: MessageComponent, pathMatch: 'full', canActivate: [AuthGuardService] },\n     { path: 'people-page', component: PeoplePageComponent, pathMatch: 'full', canActivate: [AuthGuardService] },\n     { path: '', component: HomeComponent, pathMatch: 'full', canActivate: [AuthGuardService] },\n     { path: '**', component: NotFoundComponent}\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n})\n\nexport class AppRoutingModule{}","import { Component, OnInit } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CurrentUser } from './shared/interface.model';\r\nimport { Router } from '@angular/router';\r\nimport { NavigationStart } from '@angular/router';\r\nimport { AuthService } from './shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Chatter';\r\n  public routePrefix: string = environment.media_api_url;\r\n  public user: CurrentUser;\r\n\r\n  constructor(\r\n        private router:Router,\r\n        private authService: AuthService){}\r\n\r\n  public ngOnInit(): void{\r\n    this.router.events.subscribe((event:any) =>{\r\n        // if(event instanceof NavigationStart){\r\n        //     console.log('navigationStart');\r\n        //     let user = localStorage.getItem('session') ?? null;\r\n        //     if(user){\r\n        //         this.authService.autoLogin(JSON.parse(user)).subscribe({\r\n        //             next: (response:any) => {\r\n        //                 if(response.data){\r\n        //                     this.router.navigate(['/']);\r\n        //                 }\r\n        //             }\r\n        //         });\r\n        //     }\r\n\r\n        // }\r\n    })\r\n  }\r\n\r\n}\r\n","<body>\r\n  <app-nav-menu></app-nav-menu>\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</body>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { PostComponent } from './post/post.component';\r\nimport { AppComponent } from './app.component';\r\nimport { NavMenuComponent } from './nav-menu/nav-menu.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './login/register/register.component';\r\nimport { MessageComponent} from './message/message.component';\r\nimport { PeoplePageComponent } from './people-page/people-page.component';\r\nimport { AuthGuardService } from './login/auth-guard.service';\r\nimport { ForgotPasswordComponent } from './login/forgot-password/forgot-password.component';\r\nimport { PostItemComponent } from './post/post-item/post-item.component'\r\nimport { SideBarUserComponent } from './shared/components/sidebar-user/sidebar-user.component';\r\nimport { MessageBoxComponent } from './message/message-box/message-box.component';\r\nimport { ManageUserModalComponent } from './shared/components/manage-user-modal/manage-user-modal.component';\r\nimport { ManageMessageModalComponent } from './shared/components/manage-message-modal/manage-message-modal.component';\r\nimport { ErrorBannerComponent } from './shared/components/error-banner/error-banner.component';\r\nimport { CommentSectionComponent } from './shared/components/comments-section/comment-section.component';\r\nimport { HeaderInterceptor } from './header-interceptor.interceptor';\r\nimport { CreatePostComponent } from './post/create-post/create-post.component';\r\nimport { MessageBoxHeaderComponent } from './message/message-box-header/message-box-header.component';\r\nimport { FooterComponent } from './shared/components/footer/footer.component';\r\nimport { AccountComponent } from './account/account.component';\r\nimport { PersonalInfoFormComponent } from './account/personal-info-form/personal-info-form.component';\r\nimport { PasswordInfoFormComponent } from './account/password-info-form/password-info-form.component';\r\nimport { AccountInfoComponent } from './account/account-info/account-info.component';\r\nimport { ChangeEmailFormComponent } from './account/change-email-form/change-email-form.component';\r\nimport { ConfirmationModalComponent } from './shared/components/confirmation-modal/confirmation-modal.component';\r\n\r\n\r\n//Error Exceptions\r\nimport { NotFoundComponent } from './Exceptions/404/404-not-found.component';\r\nimport { SearchBarComponent } from './shared/components/searcbar/search-bar.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavMenuComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    ForgotPasswordComponent,\r\n    RegisterComponent,\r\n    MessageComponent,\r\n    PeoplePageComponent,\r\n    PostItemComponent,\r\n    SideBarUserComponent,\r\n    MessageBoxComponent,\r\n    ManageUserModalComponent,\r\n    ManageMessageModalComponent,\r\n    ErrorBannerComponent,\r\n    CommentSectionComponent,\r\n    CreatePostComponent,\r\n    MessageBoxHeaderComponent,\r\n    PostComponent,\r\n    FooterComponent,\r\n    SearchBarComponent,\r\n    AccountComponent,\r\n    PersonalInfoFormComponent,\r\n    PasswordInfoFormComponent,\r\n    AccountInfoComponent,\r\n    ChangeEmailFormComponent,\r\n    ConfirmationModalComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [\r\n    {provide: HTTP_INTERCEPTORS, useClass: HeaderInterceptor, multi: true }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\n\n@Injectable()\n\nexport class HeaderInterceptor implements HttpInterceptor{\n    intercept(req:HttpRequest<any>, next: HttpHandler):Observable<HttpEvent<any>>{\n        const authReq = req.clone({\n            headers: req.headers.set('Access-Control-Allow-Origin', '*')\n            .set('Access-Control-Allow-Methods', '*')\n            .set('Content-Type', 'application/json')\n        })\n        console.log(\"inside interceptor: \", authReq);\n        return next.handle(authReq);\n    }   \n}","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\n\r\nexport class HomeComponent implements OnInit {\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n}\r\n","<div class=\"row container\" style=\"display: flex\">\n    <div style=\"width:30%\">\n        <app-sidebar-user></app-sidebar-user>\n    </div>\n    <div style=\"width:65%\">\n        <app-post ></app-post>\n    </div>\n</div>  \n<app-footer></app-footer>   ","import { Router, CanActivate} from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from '../shared/auth.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({providedIn: 'root'})\n\nexport class AuthGuardService implements CanActivate {\n\n    constructor(public authService: AuthService, public router: Router, private http: HttpClient) {\n    }\n\n    public canActivate():boolean{\n        /**\n         * TODO\n         * make work when user is logged in \n         */\n        if(this.router.url !== '/login' && !this.authService.currentUser){\n            this.router.navigate(['login']);\n        }\n\n        if(this.authService.currentUser){\n            return true;\n        }\n        return false;\n    }\n\n}","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators} from '@angular/forms';\n\n@Component({\n    selector: 'app-forgot-password',\n    templateUrl: './forgot-password.component.html',\n    styleUrls: ['./forgot-password.component.css']\n})\n\nexport class ForgotPasswordComponent implements OnInit {\n    public email: string = '';\n\n    public forgotPasswordForm: FormGroup;\n\n    constructor(){}\n\n    ngOnInit(): void{\n        this.forgotPasswordForm = new FormGroup({\n            fpEmail: new FormControl('', [Validators.required, Validators.email]),\n        });\n    }\n\n    get forgotPasswordControls(){\n        return this.forgotPasswordForm.controls['fpEmail'];\n    }\n\n    public submitForgotPassword(): void{\n        const forgotPassword = { email: this.forgotPasswordForm.controls['fpEmail'].value}\n        \n    }\n}","<div class=\"column\">\n    <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"submitForgotPassword()\">\n        <div class=\"passwordReset\">\n            <input [ngStyle]=\"{'border':forgotPasswordControls.invalid && forgotPasswordControls.touched ? '2px solid red' : '1px solid black'}\"\n                type=\"text\" \n                name=\"fpEmail\" \n                formControlname=\"fpEmail\" \n                placeholder=\"Enter your email to reset password\">\n            <p class=\"error-invalid\" \n                *ngIf=\"forgotPasswordControls.invalid && forgotPasswordControls.touched\">\n                Please enter a valid email </p>\n            <button type=\"button\" class=\"button\">Reset</button>\n            \n        </div>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AuthService } from '../shared/auth.service';\nimport { Router } from '@angular/router';\nimport { Login } from './auth-properties';\nimport { CurrentUser } from '../shared/interface.model';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit{\n    // Error banner stuff\n    public isError: boolean = false;\n    public errorBannerMessage: string;\n    public errorStatusCode: number; \n\n    //Form related sutff\n    public user: CurrentUser;\n    public submitted: boolean = false;\n    public loginForm: FormGroup;\n    public showRegisterForm: boolean = false;\n    public showForgotPasswordForm: boolean = false;\n\n    public loading: boolean = false;\n\n    constructor(public authService: AuthService, \n                public router: Router){}\n\n    public ngOnInit(): void{\n        // ============= attempty to setup autologin ===============\n        // let user = localStorage.getItem('session') ?? null;\n        // if(user){\n        //     console.log('user session: ', user);\n        //     this.authService.autoLogin(JSON.parse(user)).subscribe({\n        //         next: (response: any) => {\n        //             if(response.data){\n        //                 console.log(\"navigate\");\n        //                 this.router.navigate(['/']);\n        //             }\n        //         }\n        //     });\n        // }\n\n        this.loginForm = new FormGroup ({\n            email: new FormControl('', [Validators.required, Validators.email]),\n            password: new FormControl('', [Validators.required, Validators.min(6)])\n        });\n    }\n\n    public get loginControls(){\n        return this.loginForm.controls;\n    }\n\n    public get passwordLength(): number{\n        const passLen = this.loginForm.controls['password'].value.length\n        if(passLen !== 0){\n            return passLen;\n        }\n        return -1;\n    }\n\n    public clear(){ //TODO: implement\n        this.loginForm.reset();\n    }\n\n    public switchRegister():void{\n        this.showRegisterForm = false;\n        this.showForgotPasswordForm = !this.showForgotPasswordForm;\n    }\n\n    public switchForgotPassword(): void{\n        this.showForgotPasswordForm = false;\n        this.showRegisterForm =!this.showRegisterForm;\n    }\n\n    public submitLogin(): void{\n        this.submitted = true;\n        this.loading = true;\n\n        const login:Login ={\n            email: this.loginForm.controls['email'].value,\n            password: this.loginForm.controls['password'].value,\n        };\n\n        this.authService.login(login)\n        .pipe()\n        .subscribe({\n            next:(response:any) =>{\n                if(response.status === 200){\n                    console.log('response: ', response.data);\n                    localStorage.setItem('session', JSON.stringify(response.data));\n                    this.authService.setCurrentUser(response.data);\n                    this.loading = false;\n                    this.router.navigate(['/'])\n                }else{\n                    console.error(\"ERROR:\", response);\n                    this.isError = true;\n                    this.errorBannerMessage = response.message\n                    this.errorStatusCode = response.status;\n                    return;\n                }\n            }\n        });        \n       this.submitted = false;\n    }\n}\n\n","<div class=\"row\">\n    <!-- Error Banner -->\n    <app-error-banner \n        *ngIf=\"isError\" \n        [error_message]=\"errorBannerMessage\" \n        [error_type]=\"'ERROR'\" \n        [widthPercentage]=\"50\" \n        [error_status]=\"errorStatusCode\"\n        ></app-error-banner>\n    <div class=\"content\" style=\"height: 386px\">\n        <!-- Login form -->\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"submitLogin()\">\n            <div>\n                <h2> Login </h2>\n            </div>\n            <div class=\"row\">\n                <label for=\"email\">Email:</label>\n                <input [ngStyle]=\"{'border':loginControls.email.invalid && loginControls.email.touched ? '2px solid red' : '1px solid black'}\"\n                    type=\"text\" \n                    id=\"email\" \n                    placeholder=\"Please enter email\" \n                    formControlName=\"email\">\n                \n            </div>\n            <p class=\"error-invalid\" \n                *ngIf=\"loginControls.email.invalid && loginControls.email.touched\">\n                Please enter a valid email </p>\n\n            <div class=\"row\">\n                <label for=\"password\">Password:</label>\n                <input \n                    type=\"password\" \n                    id=\"password\" \n                    placeholder=\"Please enter password\"\n                    formControlName=\"password\">\n            </div>\n\n            <div class=\"row\">\n                <!-- <div class=\"row loader\" *ngIf=\"loading\"></div> -->\n                <button class=\"button login\" type=\"submit\">Login</button>\n                <button class=\"button\" type=\"button\" \n                        (click)=\"switchForgotPassword()\">Sign Up</button>\n                <button class=\"button clear\" type=\"button\" (click)=\"clear()\">Clear</button>\n                <button class=\"button\" type=\"button\" (click)=\"switchRegister()\">Forgot Password</button>\n            </div>\n        </form>\n    </div>\n    <!--  Register form -->\n    <div class=\"content\" *ngIf=\"showRegisterForm\">\n        <app-register></app-register>\n    </div>\n    <!-- Reset password form -->\n    <div class=\"content\" style=\"height: 150px !important;\" *ngIf=\"showForgotPasswordForm\">\n        <app-forgot-password></app-forgot-password>\n    </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AuthService } from '../../shared/auth.service';\nimport { Router } from '@angular/router';\nimport { Register } from './../auth-properties';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\n\nexport class RegisterComponent implements OnInit {\n    public emailConfirmFail: boolean = false;\n    public passwordConfirmFail: boolean = false;\n    public noDetailsError: boolean = false;\n\n\n    public registerForm =  new FormGroup({\n        username: new FormControl('', Validators.required),\n        firstname: new FormControl('', Validators.required),\n        surname: new FormControl('', Validators.required),\n        rEmail: new FormControl('', [Validators.required, Validators.email]),\n        phoneNumber: new FormControl('', [Validators.required]),\n        confirmEmail: new FormControl('', Validators.required),\n        rPassword: new FormControl('', [Validators.required, Validators.min(6)]),\n        confirmPassword: new FormControl('', [Validators.required, Validators.min(6)])\n    });\n\n\n    constructor(public authService: AuthService, public router: Router){}\n    \n    ngOnInit(): void {}\n\n    public clear(){\n        this.registerForm.reset();\n    }\n\n    public get compareEmail(): boolean{\n        const result = this.registerForm.value.rEmail !== this.registerForm.value.confirmEmail ? true : false;\n        return result;\n    }\n\n    public get comparePassword(): boolean{\n        const result =  this.registerForm.value.rPassword !== this.registerForm.value.confirmPassword ? true : false;\n        return result;\n    }\n\n    public get compareLogin(): boolean{\n        return (this.registerForm.value.rEmail !== this.registerForm.value.confirmEmail) &&\n                        (this.registerForm.value.rPassword !== this.registerForm.value.confirm)   \n    }\n\n    public get comparePasswordInput():boolean{\n        return this.registerForm.value.rPassword.$touched && this.registerForm.value.confirmPassword.$touched;\n    }\n\n    public get registerControls(){\n        return this.registerForm.controls;\n    }\n\n    public submitRegister(): void{\n        const registerDetails: Register = {\n            user_name: this.registerForm.value.username,\n            firstname: this.registerForm.value.firstname,\n            surname: this.registerForm.value.surname,\n            phone_number: this.registerForm.value.phoneNumber,\n            email: this.registerForm.value.rEmail,\n            password: this.registerForm.value.rPassword,\n        }\n\n        if(registerDetails.email === '' && registerDetails.password === ''){\n            this.noDetailsError = true;\n            return;\n        }\n\n        this.authService.register(registerDetails).pipe().subscribe({\n            next: (response:any) =>{\n                if(response.status === 200){\n                    this.router.navigate(['/'])\n                }\n                //display error message\n            },\n            error: (error)=>{\n                console.error(\"ERROR : \", error);\n            }\n        });\n\n        //display error message\n    }\n\n    private generateToken(){\n\n    }\n}\n\n","<div class=\"column\">\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"submitRegister()\">\n        <div>\n            <h2>Register</h2>\n        </div>\n        <div class=\"row\">\n            <label for=\"username\">Username: </label>\n            <input type=\"text\"\n                id=\"username\"\n                placeholder=\"Usernam\"\n                formControlName=\"username\">\n        </div>\n        <div class=\"row\">\n            <label for=\"firstname\">Firstname: </label>\n            <input \n                    type=\"text\" \n                    id=\"firstname\" \n                    placeholder=\"Firstname\" \n                    formControlName=\"firstname\"/>\n        </div>\n        <div class=\"row\">\n            <label for=\"surname\">Surname: </label>\n            <input \n                    type=\"text\" \n                    id=\"surname\" \n                    placeholder=\"Surname\" \n                    formControlName=\"surname\"/>\n        </div>\n        <div class=\"row\">\n            <label for=\"phoneNumber\">Phone Number: </label>\n            <input \n                    type=\"text\" \n                    id=\"phoneNumber\" \n                    placeholder=\"Phone Number\" \n                    formControlName=\"phoneNumber\"/>\n        </div>\n        <div class=\"row\">\n            <label for=\"rEmail\">Email: </label>\n            <input \n                    [ngStyle]=\"{border: compareEmail? ' 2px solid red' : '1px solid black'  }\"\n                    type=\"text\" \n                    id=\"rEmail\" \n                    placeholder=\"Email\" \n                    formControlName=\"rEmail\"/>\n        </div>\n        <div class=\"row\">\n            <label for=\"confirmEmail\">Confirm Email: </label>\n            <input \n                    [ngStyle]=\"{border: compareEmail ? ' 2px solid red' : '1px solid black'  }\"\n                    type=\"text\" \n                    id=\"confirmEmail\" \n                    placeholder=\"Confirm email\" \n                    formControlName=\"confirmEmail\"/>\n        </div>\n        <p class=\"error-invalid\" \n            *ngIf=\"compareEmail && (registerControls.rEmail.touched && registerControls.confirmEmail.touched)\">\n            Please make sure both entered emails are the same </p>\n        <div class=\"row\">\n            <label for=\"rPassword\">Password: </label>\n            <input \n                    [ngStyle]=\"{border: comparePassword && comparePasswordInput ? ' 2px solid red' : '1px solid black'  }\"\n                    type=\"password\" \n                    id=\"rPassword\" \n                    placeholder=\"Password\" \n                    formControlName=\"rPassword\"/>\n        </div>\n        <div class=\"row\">\n            <label for=\"confirmPassword\">Confirm Password </label>\n            <input \n                    [ngStyle]=\"{border: comparePassword && comparePasswordInput ? ' 2px solid red' : '1px solid black'  }\"\n                    type=\"password\" \n                    id=\"confirmPassword\" \n                    placeholder=\"Confirm Password\" \n                    formControlName=\"confirmPassword\"/>\n        </div>\n        <p class=\"error-invalid\" \n                *ngIf=\"comparePassword && (registerControls.rPassword.touched && registerControls.confirmPassword.touched)\">\n                Please make sure both entered passwords are the same </p>\n        <p class=\"error-invalid\"\n            *ngIf=\"noDetailsError\">\n            Please make sure you have entered your details</p>\n        <div class=\"row\">\n            <button class=\"button\" type=\"submit\" [disabled]=\"compareLogin\">Create</button>\n            <button class=\"button\" (click)=\"clear()\">Clear</button>\n        </div>\n\n    </form>\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { CurrentUser, Error } from 'src/app/shared/interface.model';\nimport { MessageService } from '../message.service';\n\n@Component({\n    selector: 'app-message-box-header',\n    templateUrl: './message-box-header.component.html',\n    styleUrls: ['./message-box-header.component.css'],\n})\n\nexport class MessageBoxHeaderComponent implements OnInit{\n\n    @Input() public selectedUser: CurrentUser;\n    @Output() public emitToggleManagerUser: EventEmitter<boolean> = new EventEmitter();\n\n    public showError: boolean = false;\n    public toggleManageUser: boolean = false;\n\n    constructor(private messageService: MessageService){}\n\n    public ngOnInit(): void{\n        // listen for when selected user is pressed\n        this.messageService.emitSelectedUser.subscribe((selectedUser: CurrentUser) => {\n            this.selectedUser = selectedUser;\n        });\n    }\n\n    public showManageUserModal(){\n        if(!this.selectedUser){\n            \n        }else{\n            this.toggleManageUser = !this.toggleManageUser;\n            this.emitToggleManagerUser.emit(this.toggleManageUser);\n        }\n    }\n}","<div class=\"row header\">\n    <h2 style=\"width: auto;\">Messages with</h2>\n    <a class=\"divider\"></a>\n    <img class=\"pp\" src=\"assets/default-avatar.png\"\n        alt=\"profile-picture\">\n    <h3 style=\"width: auto; padding-left: 0px;\"> <a href=\"#their profile link\">{{selectedUser ? selectedUser.user_name : 'No user selected'}}</a> </h3>\n    <a class=\"divider\"></a>\n    <button \n    class=\"user-setting-btn\" \n    (click)=\"showManageUserModal()\"\n    [class.error]=\"!selectedUser\"><h4>...</h4></button>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/shared/auth.service';\n//RXJS\n//Components\n//Services \nimport { MessageService } from '../message.service';\n//Interfaces\nimport {Message, CurrentUser } from 'src/app/shared/interface.model';\n\n@Component({\n    selector: 'app-message-box',\n    templateUrl: './message-box.component.html',\n    styleUrls: ['./message-box.component.css']\n})\n\nexport class MessageBoxComponent implements OnInit {\n    // recieve selected user from sidebar\n    @Input() selectedUser: CurrentUser; \n\n    public currentUser: CurrentUser;\n    public messageForm: FormGroup;\n    public selectedUserMessage: Message;\n    public loading: boolean = false;\n    public messageData: Message[] = [];\n\n    // Hover over message related properties\n    public toggleSettings: boolean = false;\n    public messageHoverId: number;\n    public toggleEdit: boolean = false;\n    public recieverHover: boolean = false;\n\n    // manage message options\n    public editMode: boolean = false; \n    public noUserSelectedError: string;\n\n    constructor(private messageService: MessageService, \n                private authService: AuthService){}\n    \n    ngOnInit(): void{\n        this.messageForm = new FormGroup({\n            message: new FormControl('' , [Validators.required])\n        });\n        // get user from local storage\n        this.currentUser = JSON.parse(localStorage.getItem('session') || '');\n\n        // listen for when a user on the sidebar menu is selected\n        this.messageService.emitSelectedUser\n        .subscribe((selectedUser: CurrentUser) => {\n            this.messageData = [];\n            this.loading = true;\n            this.selectedUser = selectedUser;\n\n            // get message by the selectedUser id\n            this.messageService.getMessages(this.currentUser.message_id, selectedUser.message_id)\n                .subscribe((response: any) => {\n                    if(!response ) {return}\n                    console.log(\"response: \", response);\n                    // work out sender after data returned from database\n                    // Want to base the sender of the currently logged in user\n                    this.findSenderAndReciever(response.data);\n                    this.loading = false;\n                })\n    \n        })\n    }\n\n    \n    /**\n     * will send or edit a message and send the new data to the server\n     * \n     * @params none\n     * @returns void\n     */\n    public send():void {\n        const message = this.getMessage;\n        if(message === ''){\n            return; \n        }\n        // check if the user wants to edit the message\n        if(this.editMode){ \n            const message_to_edit = this.findMessageToEdit(this.messageHoverId);\n            message_to_edit.message = message; \n            this.messageService.editMessage(message_to_edit).pipe().subscribe({\n                next: (response: any) => {\n                    if(response.status === 200){\n                        this.findUpdatedMessage(response.data);\n                    }\n                    /**\n                     * Throw error if necessary\n                     */\n                },\n                \n            });\n            this.editMode = false;\n            this.clearMessageBox();\n            return;\n        }\n        \n        const new_message = {\n            sender: this.authService.currentUser?.id,\n            reciever: this.selectedUser.id,\n            message: message,\n        };\n\n        // set message locally\n        this.messageService\n            .setMessage(new_message)\n            .subscribe((message: any)=>{// return the latest message from the server\n                if(message.status === 200){\n                    this.findSenderAndReciever(message.data);// find sender and reciever\n                }\n                /**\n                 * throw error if necessary\n                 */\n            });\n        \n        this.clearMessageBox();\n    }\n\n\n    /**\n     * Will update message on front end with new message from backend\n     * @param Message newMessage \n     * @returns void\n     */\n    private findUpdatedMessage(newMessage: Message): void{\n        this.messageData.forEach((message: Message) => {\n            message.id === newMessage.id ? message.message = newMessage.message : null;\n        })\n    }\n    \n    /**\n     * Will set the sender boolean to tell sender and reciever apart from server\n     * @param message[] \n     * @returns void\n     */\n    private findSenderAndReciever(message: Message[]): void{\n        this.messageData = [];\n        message.forEach((message) => {\n            if(message.user_sender_id === this.currentUser.message_id) { message.isSender = true }\n            else { message.isSender = false}\n            this.messageData.push(message);\n        })\n    }\n    \n    public get getMessage(): string{\n        return this.messageForm.controls['message'].value;\n    }\n\n    /*\n    * Sets hover and sets the index of the message with hover\n    * @property: none\n    * @return: void\n    */    \n    public hoverSettings(id: number, index: number): void{\n        if(this.toggleEdit) return;\n        if(this.isMessageDeleted(index)){ return; }\n        this.messageHoverId = id;\n        this.toggleSettings = !this.toggleSettings;\n    }\n\n    /*\n    * Toggles the edit message component on and off\n    * @property: none\n    * @return: void\n    */\n    public calltoggleEdit(reciever: boolean = false): void{ \n        this.recieverHover = false;\n        if(reciever){ this.recieverHover = true; }\n       this.toggleEdit = !this.toggleEdit; \n    }\n\n    /*\n    * Will exit the message modal when exit button is pressed\n    * @property: boolean\n    * @return: void\n    */\n    public manageMessageExit(exit: boolean): void{ this.toggleEdit = exit; }\n    \n    /**\n     * will patch tghe value to edit to the message form controls\n     * @param edit boolean\n     */\n    public manageMessageEdit(edit: boolean): void{ \n        this.editMode = edit; \n        const messageToEdit = this.findMessageToEdit(this.messageHoverId)\n        this.messageForm.controls['message'].patchValue(messageToEdit.message)\n    }\n\n    /**\n     * will delete a message using a messageHoverId\n     * \n     */\n    public manageMessageDelete(): void{\n        this.messageService.deleteMessage(this.messageHoverId)\n            .pipe()\n            .subscribe((response: any) => {\n                if(response.status === 200){\n                    console.log(\"message deleted\")\n                    this.findUpdatedMessage(response.data);\n                }\n                console.log('something went wrong');\n            });\n    }\n\n    public manageMessageForward(forward: boolean): void{}\n\n    /*\n    * Will clear the message box when message is sent\n    * @property: none\n    * @return: void\n    */\n    public clearMessageBox(): void{ this.messageForm.reset(); }\n\n    private findMessageToEdit(message_id: number):any{\n        if(!message_id){ return; }\n        // filter the message to edit and retreieve the first message \n        return this.messageData.filter((message) => {\n            return message.id === message_id;\n        })[0];\n    }\n\n    /*\n    * Checks which message the user is hovering over\n    * @property: number\n    * @return: boolean\n    */\n    public hoverCheck(id: number): boolean{ return this.toggleSettings && id === this.messageHoverId ? true : false }\n\n    public isMessageDeleted(index: number): boolean{ return this.messageData[index].message === 'Message has been deleted'; }\n}","\n<div class=\"message-content\" style=\"display:inline-block\">\n    <form [formGroup]=\"messageForm\">\n        <!-- Message window -->\n        <div class=\"row message-window\" *ngIf=\"!loading else noData\">\n            <div class=\"box\" *ngFor=\"let user_message of messageData; let i = index;\">\n                <div>\n                    <!-- sender -->\n                    <div class=\"message-box sender\"\n                        [class.message-deleted]=\"isMessageDeleted(i)\"\n                        *ngIf=\"user_message.isSender\" \n                        (mouseover)=\"hoverSettings(user_message.id, i)\" \n                        (mouseleave)=\"hoverSettings(user_message.id, i)\">\n                        <ng-container *ngIf=\"!isMessageDeleted(i)\">\n                            <button class=\"edit\" (click)=\"calltoggleEdit()\">...</button>\n                            <div class=\"divider\"></div>\n                        </ng-container>\n                        {{user_message.message}}\n                    </div>\n    \n                    <!-- reciever -->\n                    <div class=\"message-box reciever\" \n                        *ngIf=\"!user_message.isSender\">\n                        <ng-container *ngIf=\"!isMessageDeleted(i)\">\n                            <button class=\"edit\" (click)=\"calltoggleEdit(true)\">...</button>\n                            <div class=\"divider\"></div>\n                        </ng-container>\n\n                        {{user_message.message}} \n                    </div>\n                </div>\n            </div>\n           \n            <!-- Message pop up -->\n            <app-manage-message-modal \n                *ngIf=\"toggleEdit\" \n                [isReciever]=\"recieverHover\"\n                (emitExit)=\"manageMessageExit($event)\"\n                (emitEdit)=\"manageMessageEdit($event)\"\n                (emitDelete)=\"manageMessageDelete()\"\n                (emitForward)=\"manageMessageForward($event)\">\n            </app-manage-message-modal>\n        </div>\n        <ng-template #noData>\n            <p>Please select a user to message</p>\n        </ng-template>\n\n        <!-- footer -->\n        <div class=\"row footer-content\">\n            <input class=\"message-box\"type=\"text\" placeholder=\"Send a message\" formControlName=\"message\"/>\n            <button type=\"button\" class=\"button\" (click)=\"send()\" > Send</button>        \n        </div>\n    </form>\n</div>","import { Component, OnInit} from \"@angular/core\";\nimport { MessageService } from \"./message.service\";\nimport { AuthService } from \"../shared/auth.service\";\n\n//Interfaces \nimport {CurrentUser} from '../shared/interface.model';\n\n@Component({\n    selector: 'app-message',\n    templateUrl: './message.component.html',\n    styleUrls: ['./message.component.css']\n})\n\nexport class MessageComponent implements OnInit{\n    public users: CurrentUser[] =[]\n    public selectedUser: CurrentUser;\n    public userHeaderName: string = 'No user selected';\n    public toggleManageUser: boolean = false;    \n    //Error Banner\n    public showErrorBanner: boolean = false;\n    public errorBannerMessage: string;\n    public errorBannerType: string;\n\n    constructor(private authService: AuthService, private messageService: MessageService){}\n\n    ngOnInit(){} \n\n    public closeError(){this.showErrorBanner = false;}\n\n    public toggleManagerUserModel(event: any): void{ \n        this.toggleManageUser = event;\n    }\n\n}","<div class=\"row container\" style=\"display: flex\">\n    <app-error-banner \n        *ngIf=\"showErrorBanner\" \n        [error_message]=\"errorBannerMessage\" \n        [error_type]=\"errorBannerType\"\n        (emitClose)=\"closeError()\"></app-error-banner>\n\n    <div style=\"width:30%; height: 100%;\">\n        <app-sidebar-user></app-sidebar-user>\n    </div>\n\n    <div class=\"column content\" style=\"width: 65%;\">\n        <app-message-box-header\n        [selectedUser]=\"selectedUser\"\n        (emitToggleManagerUser)=\"toggleManagerUserModel($event)\"\n        ></app-message-box-header>\n        <app-manage-user-modal \n            *ngIf=\"toggleManageUser\"\n            [user]=\"selectedUser\"></app-manage-user-modal>\n        <div class=\"row seperator\"></div>\n\n        <app-message-box\n        [selectedUser]=\"selectedUser\"\n        ></app-message-box>\n    </div>\n</div>      \n<app-footer></app-footer>","import { CurrentUser, Message } from \"../shared/interface.model\";\nimport { environment } from \"src/environments/environment\";\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n\n/* RXJS */\nimport { Subject } from 'rxjs';\n\n@Injectable({providedIn: 'root'})\n\nexport class MessageService{\n    public messagesChange = new Subject<Message>(); //emites a new message \n    public emitSelectedUser = new Subject<CurrentUser>();\n    public routePrefix: string = environment.media_api_url;\n\n    constructor(private http: HttpClient){}\n\n    /* pass in the user id to get messages from backend */\n    public getMessages(sender_id: number, reciever_id: number){\n        const params = new HttpParams()\n        .set('senderId', sender_id).set('recieverId', reciever_id)\n        return this.http.get(this.routePrefix + \"messages\", {params});\n    }\n\n    public setMessage(message: any){\n        return this.http.post(this.routePrefix + \"messages/set-message\", message);\n    }\n\n    public deleteMessage(message_id: number){\n        return this.http.delete(this.routePrefix + 'messages/' + message_id);\n    }\n\n    public editMessage(message:Message){\n        return this.http.post(this.routePrefix + \"messages/edit\", message);\n    }\n}","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../shared/auth.service';\r\nimport { CurrentUser } from '../shared/interface.model';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent implements OnInit {\r\n  isExpanded = false;\r\n  public currentUser: CurrentUser;\r\n\r\n  public findFriendsForm: FormGroup;\r\n\r\n  constructor(private authService:AuthService, private fb: FormBuilder){}\r\n\r\n  ngOnInit():void { \r\n    this.authService.emitCurrentUser.subscribe((user:CurrentUser) => {\r\n        this.currentUser = user;\r\n    });\r\n\r\n    this.initForm();\r\n\r\n    // this.findFriendsForm.controls.get('searchBar').valueChanges.subscribe(\r\n    // (value) => {\r\n    //     console.log(value);\r\n    // });\r\n  }\r\n\r\n  private initForm(): void{ \r\n    this.findFriendsForm = this.fb.group({\r\n        searchBar: [''],\r\n    })\r\n  }\r\n\r\n  /**\r\n   * returns the search bar string value\r\n   */\r\n  public get searchBarValue(): string{\r\n    return this.findFriendsForm.controls['searchBar'].value;\r\n  }\r\n\r\n  collapse() {\r\n    this.isExpanded = false;\r\n  }\r\n\r\n  toggle() {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n","<header>\r\n  <nav\r\n    class=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\"\r\n  >\r\n    <div class=\"container\">\r\n      <a class=\"navbar-brand\" [routerLink]=\"['/']\">\r\n        <img src=\"../../assets/header_logo.png\" alt=\"logo\">\r\n      </a>\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\".navbar-collapse\"\r\n        aria-label=\"Toggle navigation\"\r\n        [attr.aria-expanded]=\"isExpanded\"\r\n        (click)=\"toggle()\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div\r\n        class=\"navbar-collapse collapse d-sm-inline-flex justify-content-end\"\r\n        [ngClass]=\"{ show: isExpanded }\">\r\n        <ul class=\"navbar-nav flex-grow nav-buttons\" style=\"width: 100%\">\r\n            <app-search-bar></app-search-bar>   \r\n            <a class=\"nav-link text-dark align\" [routerLinkActive]=\"['link-active']\" [routerLink]=\"['/']\">Home</a>\r\n            <a class=\"divider align\"></a>\r\n            <a class=\"text-dark align\">User: {{currentUser?.user_name ? currentUser?.user_name : 'Not logged in'}}</a>\r\n            <a class=\"divider align\"></a>\r\n            <a class=\"nav-link text-dark align\" [routerLinkActive]=\"['link-active']\" [routerLink]=\"['/message']\">Messages</a>\r\n            <a class=\"nav-link text-dark align\" [routerLinkActive]=\"['link-active']\" [routerLink]=\"['/people-page']\">PeoplesPage</a>\r\n            <a class=\"nav-link text-dark align\" [routerLinkActive]=\"['link-active']\" [routerLink]=\"['/account']\">Account</a>\r\n\r\n            <a class=\"divider align\"></a>\r\n            <a class=\"nav-link text-dark align\" [routerLinkActive]=\"['link-active']\" [routerLink]=\"['/login']\">{{ !!currentUser ? 'Logout' : 'Login'}}</a>\r\n            <!-- <a class=\"nav-link text-dark align\" [routerLinkActive]=\"['link-active']\" [routerLink]=\"['/account']\">MyAccount</a> -->\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</header>\r\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: 'app-people-page',\n    templateUrl: './people-page.component.html',\n})\n\nexport class PeoplePageComponent {\n}\n","<div class=\"container\">\n    <h2>Peoples Page</h2>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormControl } from \"@angular/forms\";\nimport { Posts } from \"src/app/shared/interface.model\";\nimport { PostSerice } from \"../post.service\";\n\n@Component({\n    selector: 'app-create-post',\n    templateUrl: './create-post.component.html',\n    styleUrls: ['./create-post.component.css']\n})\n\nexport class CreatePostComponent implements OnInit{\n\n    public newCreatePost: FormGroup;\n\n    constructor(private postService: PostSerice){}\n\n    ngOnInit(): void {\n        this.newCreatePost = new FormGroup({\n            title: new FormControl(''),\n            body:new FormControl(''),\n            img: new FormControl(''),\n        });\n    }\n\n    public createNewPost(){\n        const new_post:Posts = {\n            title: this.newCreatePost.get('title')?.value,\n            body: this.newCreatePost.get('body')?.value,\n            img: '',\n        }\n\n        this.postService.setPosts(new_post).pipe().subscribe((post) => {\n            console.log(\"response: \", post );\n        })\n    }\n}","<div class=\"content\">\n    <form [formGroup]=\"newCreatePost\"> \n        <div class=\"row header-content\">\n            <h3 style=\"width: auto;\">\n                <input class=\"title-input\" type=\"text\" placeholder=\"Type a title\" formControlName=\"title\"/>\n            </h3>\n        </div>\n        <div    \n            class=\"row post-content\" \n            >\n            <!-- show if there is an image -->\n            <div class=\"body\">\n                <input class=\"body-input\" type=\"text\" placeholder=\"Enter some text\" formControlName=\"body\" />\n            </div>  \n            <div class=\"footer-content\">\n                <button class=\"post-btn\" (click)=\"createNewPost()\">Post</button>\n            </div>\n        </div>\n    </form>\n</div>","import {Component, OnInit, Input} from '@angular/core'\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Comment } from 'src/app/shared/interface.model';\n// import { PostSerice } from '../post.service';\n\n\n@Component({\n    selector: 'app-post-item',\n    templateUrl: './post-item.component.html',\n    styleUrls: ['./post-item.component.css']\n})\n\nexport class PostItemComponent implements OnInit {\n\n    @Input() public post_id: number;\n    @Input() public comment_id: number;\n    @Input() public title: string;\n    @Input() public uploadDate: string;\n    @Input() public img: string;\n    @Input() public content: string;\n    @Input() public likes: number = 0;\n\n    public postOptionsForm: FormGroup;\n    public comments: Comment[];\n    \n    // TODO: make this input when like system is setup\n    public isLiked: boolean = false;\n    public showComment: boolean = false;\n    public toggleCommentSection: boolean = false;\n\n    constructor(){}\n\n    ngOnInit(): void {\n        // get comments for a certain post when inialised\n        // this.comments = this.postService.getComments(this.comment_id);\n        // Initialise comment box\n        this.postOptionsForm = new FormGroup({\n            commentBox: new FormControl(''),\n        });\n        //listen for comments change\n        // this.postService.commentChange.pipe().subscribe({\n        //     next: (updated_comments:Comment)=>{    \n        //         this.comments.push(updated_comments)\n        //     }\n        // })\n    }\n\n    public like(): void{\n        this.isLiked = !this.isLiked;\n        //need proper user account to save likes to account;\n        // this.postService.setLike(this.isLiked, this.post_id);\n    }\n\n    public comment():void{\n        const comment = this.postOptionsForm.get('commentBox')?.value;\n        const new_comment:Comment = {id: this.comment_id, comment}\n        // this.postService.setComment(new_comment);\n        this.clearComments();\n    }   \n\n    public clearComments(): void{\n        this.postOptionsForm.reset();\n    }\n\n    public share():void{\n        // console.log(\"Share post\");\n    }\n\n    public showComments(): void{\n        this.toggleCommentSection = !this.toggleCommentSection\n    }\n}\n","<div class=\"content\">\n    <form [formGroup]=\"postOptionsForm\">\n        <div class=\"row header-content\">\n            <h3 style=\"width: auto;\">{{title}}</h3>\n            <p style=\"width: auto;\">{{uploadDate}}</p>\n        </div>\n        <div \n            class=\"row post-content\" \n            (click)=\"showComments()\">\n            <!-- show if there is an image -->\n            <img src=\"{{img}}\">\n            <div class=\"body\">\n                {{content}}\n            </div>  \n        </div>\n        <app-comment-selction\n            style=\"padding: 0px;\"\n            *ngIf=\"toggleCommentSection\"\n            [comments]=\"comments\"></app-comment-selction>\n        <div class=\"row footer-content\">\n            <label class=\"likes-label\" for=\"likes\">Likes: {{likes}}</label>\n            <div class=\"divider\"></div>\n            <button\n                [ngStyle]=\"{'background-color': isLiked ? 'rgb(70, 205, 250)' : 'rgb(255, 255, 255)'}\"\n                type=\"button\" \n                class=\"actionBtn like-button\" \n                (click)=\"like()\"></button>\n            <button \n                class=\"actionBtn comment-button\" \n                type=\"button\" \n                (click)=\"showComment = !showComment\"></button>\n            <button \n                class=\"actionBtn share-button\" \n                type=\"button\" \n                (click)=\"share()\"></button>\n            <input \n                *ngIf=\"showComment\" \n                type=\"text\" \n                formControlName=\"commentBox\"\n                placeholder=\"Leave a comment!\"/>\n            <button \n                *ngIf=\"showComment\" \n                class=\"actionBtn post-comment\" \n                type=\"text\" \n                (click)=\"comment()\"></button>\n        </div>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { CurrentUser, Posts } from '../shared/interface.model';\nimport { MessageService } from '../message/message.service';\nimport { PostSerice } from './post.service';\nimport { UserService } from '../shared/user.service'\nimport { AuthService } from '../shared/auth.service';\n\n@Component({\n    selector: 'app-post',\n    templateUrl: './post.component.html',\n    styleUrls: ['./post.component.css']\n})\n\nexport class PostComponent implements OnInit{\n    public currentUser: CurrentUser;\n    public friends_list: any;\n    public posts: Posts[];\n    public selectedUser: CurrentUser;\n    public toggleCreateNewPost: boolean = false;\n    public test: string = \"test1\";\n    \n    constructor(private messageService: MessageService, \n                private postService: PostSerice, \n                private userService:UserService,\n                private authService:AuthService,\n                ){}\n\n    ngOnInit(){\n        this.authService.emitCurrentUser.subscribe((user:CurrentUser) => {\n            this.currentUser = user;\n            this.friends_list = user.friend_list;\n            this.userService.hasFriendsEvent.next(user.friend_list);\n        });\n\n    }\n\n    public toggleNewPost(): void{\n        this.toggleCreateNewPost = !this.toggleCreateNewPost;\n    }\n\n}","<div class=\"content\">\n    <button class=\"new-post-btn\" (click)=\"toggleNewPost()\"> New Post</button>\n    <app-create-post\n    *ngIf=\"toggleCreateNewPost\">\n    </app-create-post>\n    <div class=\"row\" \n        *ngFor=\"let post of posts; let i = index\">\n        <app-post-item\n            [title]=\"post.title\"\n            [img]=\"post.img ?? ''\"\n            [content]=\"post.body\"\n        ></app-post-item>\n    </div>\n</div>","import { Injectable, OnInit } from \"@angular/core\";\nimport { Comment, Posts } from \"../shared/interface.model\";\nimport { Subject } from \"rxjs\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"src/environments/environment\";\n \n@Injectable({providedIn: 'root'})\n\nexport class PostSerice implements OnInit{\n    public routePrefix: string = environment.media_api_url;\n\n    public allComments: Comment[];\n    public commentChange = new Subject<Comment>();\n    public postLikeChange = new Subject<boolean>();\n    public currentUserId: number;\n\n    constructor(private http:HttpClient){}\n\n    public ngOnInit(): void{}\n\n    public setLike(liked:boolean, post_id: number): void{}\n\n    public setComment(new_comment:Comment){\n        this.allComments.push(new_comment);\n        //Set comment\n        this.commentChange.next(new_comment);\n    }\n    \n    public getComments(comment_id: number){\n        // //get Comments\n        // const user_comments = this.allComments.filter((comment:Comment) => {\n        //     return comment.id === comment_id;\n        // })\n        // return user_comments;\n    }\n\n    public getPost(post_id: number){\n        return this.http.get(\"/posts/\" + post_id);\n    }\n\n    public getAllPosts(){\n        return this.http.get(this.routePrefix + '/posts/get-all-posts');\n    }\n\n    public setPosts(new_post: Posts){\n        return this.http.post(this.routePrefix + \"/posts/create-post\", new_post);\n    }\n\n    public deletePosts(post_id: number){\n        return this.http.delete(this.routePrefix + \"/posts/\"+post_id);\n    }   \n\n    public editPosts(){\n\n    }\n}","\nimport { Injectable, OnInit } from \"@angular/core\";\nimport { environment } from \"src/environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Login, Register} from \"../login/auth-properties\";\nimport { CurrentUser } from \"./interface.model\";\nimport {Subject} from 'rxjs';\n\n@Injectable({providedIn: 'root'})\n\nexport class AuthService implements OnInit{\n    public routePrefix: string = environment.php_api_url;\n    public currentUser: CurrentUser | null; //create subject/observable to detect a new user\n    public emitCurrentUser = new Subject<CurrentUser>();\n\n    constructor(private http: HttpClient){}\n\n    public ngOnInit(): void{\n    }\n\n    public setCurrentUser(user: CurrentUser): void{\n        user.lastOnline = new Date();\n        user.status =  'ACTIVE'\n        this.currentUser = user;\n        this.emitCurrentUser.next(user);\n        return;\n    }\n\n    public login(loginDetails: Login){\n        return this.http.post(this.routePrefix + 'user/login', loginDetails);\n    }\n\n    public register(user: Register){\n        return this.http.post(this.routePrefix + 'user/create-user', user);\n    }\n\n    public superLogin(){\n        return this.http.post(this.routePrefix + 'user/super-login', {superLogin: true});\n    }\n    public autoLogin(user: CurrentUser){\n        return this.http.post(this.routePrefix + 'user/auto-login', user);\n    }\n\n\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Comment } from '../../interface.model';\n@Component({\n    selector: 'app-comment-selction',\n    templateUrl: './comment-section.component.html',\n    styleUrls: ['./comment-section.component.css']\n})\n\nexport class CommentSectionComponent implements OnInit{\n\n    @Input() comments: Comment[];\n\n    constructor(){}\n\n    ngOnInit(){\n        console.log(this.comments);\n    }\n\n\n\n}","<div class=\"container\">\n    <div class=\"comment-box\">\n        <div class=\"comment\" *ngFor=\"let comment of comments; let i = index;\">\n            <p>{{ comment.comment }}</p>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-confirmation-modal',\n    templateUrl: './confirmation-modal.component.html',\n    styleUrls: ['./confirmation-modal.component.scss']\n})\n\nexport class ConfirmationModalComponent implements OnInit{\n    constructor(){}\n\n    public ngOnInit(): void{ \n        \n    }\n}","<div class=\"container\">\n    <h2>confirmation</h2>\n</div>","import { Component, Input, OnInit, Output, EventEmitter} from \"@angular/core\";\n\n@Component({\n    selector: 'app-error-banner',\n    templateUrl: './error-banner.component.html',\n    styleUrls: ['./error-banner.component.scss']\n})\n\nexport class ErrorBannerComponent implements OnInit {\n    @Input() error_message: string; \n    @Input() error_type: string;\n    @Input() error_status: number;\n    @Input() widthPercentage: number;\n    @Output() emitClose = new EventEmitter();\n\n    constructor(){}\n\n    public ngOnInit(): void {\n        setTimeout(()=> this.emitClose.emit(), 5000); //banner closes after a certain time\n    }\n\n    public get error_color(): string{\n        //sets the background color depending on the type of error\n        switch(this.error_type){\n            case \"WARNING\":\n                return '1.5px solid rgb(252, 149, 53)';\n            case \"ERROR\":\n                return '1.5px solid rgb(232, 60, 60)';\n            case \"SUCCESS\":\n                return '1.5px solid green';\n            default:\n                return '1.5px solid blue';\n        }\n    }\n}","<div class=\"row banner\" [ngStyle]=\"{'border:': error_color, 'width': widthPercentage ? widthPercentage + '%' : '100%'}\">\n    <h4>{{'Status: ' + error_status + ' - ' + error_message}}</h4>\n</div>","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'app-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.css'],\n})\n\nexport class FooterComponent implements OnInit{\n    constructor(){}\n\n    public ngOnInit(): void {}\n    \n}","<div class=\"row footer\">\n    <label for=\"footer\">Footer</label>\n</div>","import { Component, OnInit, EventEmitter, Output, Input, OnChanges, SimpleChanges } from \"@angular/core\";\n\n@Component({\n    selector: 'app-manage-message-modal',\n    templateUrl: './manage-message-modal.component.html',\n    styleUrls: ['./manage-message-modal.component.css'],\n})\n\nexport class ManageMessageModalComponent implements OnInit, OnChanges{\n    @Input() public isReciever: boolean;\n\n    @Output() public emitExit = new EventEmitter<boolean>();\n    @Output() public emitEdit = new EventEmitter<boolean>();\n    @Output() public emitDelete = new EventEmitter<boolean>();\n    @Output() public emitForward = new EventEmitter<boolean>();\n\n    constructor(){}\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if(changes.isReciever){\n            console.log(\"changes: \", changes.isReciever);\n        }\n    }\n    \n    public ngOnInit(): void {\n        console.log('reciever: ', this.isReciever);\n    }\n\n\n    public edit(): void{ \n        this.emitEdit.next(true); \n        this.emitExit.next(false);\n    }\n\n    public delete(): void{\n        this.emitDelete.next(true); \n        this.emitExit.next(false);\n    }\n\n    public forward(): void{ \n        this.emitDelete.next(true); \n        this.emitExit.next(false);\n    }\n\n    public exit(): void{ this.emitExit.next(false); }\n}   ","<div class=\"row container\">\n    <h3>Manage Message</h3>\n    <button *ngIf=\"!isReciever\" class=\"button\" (click)=\"edit()\">Edit</button>\n    <button *ngIf=\"!isReciever\" class=\"button close\" (click)=\"delete()\">Delete</button>\n    <button class=\"button\" (click)=\"forward()\">Forward</button>\n    <button class=\"button close\" (click)=\"exit()\">X</button>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { UserContacts, CurrentUser } from '../../interface.model';\n\n\n@Component({\n    selector: 'app-manage-user-modal',\n    templateUrl: './manage-user-modal.component.html',\n    styleUrls: ['./manage-user-modal.component.css']\n})\n\nexport class ManageUserModalComponent implements OnInit {\n\n    @Input() user: CurrentUser;\n    @Input() user_contact_details: UserContacts;\n\n    constructor() {}\n\n    ngOnInit(): void{\n        console.log('selectedUser manage user modal: ', this.user);\n    }\n\n    public goToUserPage(): void{\n        \n    }\n\n    public get name(){\n        return this.user.first_name.toUpperCase() + \" \" + this.user.sur_name.toUpperCase();\n    }\n\n}","<div class=\"row container\">\n    <div class=\"user-info\">\n        <div class=\"user-header\">\n            <h2>User Profile</h2>\n        </div>\n        <div class=\"user-body\">\n            <img class=\"pp\" src=\"assets/default-avatar.png\"\n            alt=\"profile-picture\">\n            <p>{{ user.user_name }}</p>\n            <p>{{ name }}</p>\n            <p>{{ user_contact_details.email }}</p>\n        </div>\n    </div>\n    <div class=\"divider\"></div>\n    <div class=\"user-controls\">\n        <div class=\"controls-header\">\n            <h2>Manage User</h2>\n        </div>\n        <div class=\"controls-body\">\n            <button class=\"button\" (click)=\"goToUserPage()\">GO to user page</button>\n            <button class=\"button caution\">Unfriend user</button>\n            <button class=\"button caution\">Mute user</button>\n            <button class=\"button caution\">block user</button>\n            <button class=\"button caution\">EXIT</button>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n    selector: 'app-search-bar',\n    templateUrl: './search-bar.component.html',\n    styleUrls: ['./search-bar.component.css']\n})\n\nexport class SearchBarComponent implements OnInit{\n\n    constructor(){}\n\n    public ngOnInit(): void{ }\n}\n\n//create form for the input\n//when the user starts typing in input box, listen for a valueChanged event\n// send request with string to endpoint to fetch friend \n// use string to search subsctrings in the database, return the list of friends that matches the string \n","<div class=\"ff-container\">\n    <label \n        for=\"friend find\"\n        class=\"ff-label\">\n        Friend Finder\n        <input type=\"text\" class=\"ff-input\">\n    </label>\n</div>","import { Component, OnInit, Input, ChangeDetectorRef } from \"@angular/core\";\nimport { AuthService } from \"../../auth.service\";\nimport { MessageService } from \"src/app/message/message.service\";\nimport { Router } from \"@angular/router\";\n//Interfaces\nimport { CurrentUser } from \"../../interface.model\";\n\n@Component({\n    selector: 'app-sidebar-user',\n    templateUrl: './sidebar-user.component.html',\n    styleUrls: ['./sidebar-user.component.css'],\n})\n\nexport class SideBarUserComponent implements OnInit{\n    // make as table\n    @Input() user: CurrentUser;\n    \n    public currentUser: CurrentUser;\n    public profile_picture: string;\n    public status: string;\n    public selectedUser: CurrentUser;\n\n    constructor(private authService:AuthService, \n                private cd: ChangeDetectorRef, \n                private messageService: MessageService,\n                private router: Router){}\n    \n    ngOnInit(): void {\n        this.currentUser = JSON.parse(localStorage.getItem('session') || '');\n        this.currentUser.lastOnline;\n\n        if(this.currentUser.status === 'ACTIVE'){\n            this.status = 'assets/active-user.png'\n        }\n        else if(this.currentUser.status === 'INACTIVE'){\n            this.status = 'assets/inactive-user.png';\n        }\n        else if(this.currentUser.status === 'AFK'){\n            this.status = 'assets/afk-user.png'\n        }\n    }\n\n    public setSelectedUser(selectedUserIndex: number): void{\n        this.selectedUser = this.currentUser.friend_list[selectedUserIndex];\n        this.messageService.emitSelectedUser.next(this.selectedUser);\n        this.router.navigate(['message']);\n    }\n}","\n<div class=\"content\">\n    <h2>Sidebar</h2>\n    <div class=\"divider\"></div>\n    <div class=\"row\" \n        *ngFor=\"let friend of currentUser.friend_list; let i = index\" \n        (click)=\"setSelectedUser(i)\">\n        <div class=\"row sidebar-user\">\n            <img class=\"pp\" src=\"assets/default-avatar.png\"\n                alt=\"profile-picture\">\n        \n            <img class=\"status\" [src]=\"status\" alt=\"status\">\n        \n            <p>{{friend.user_name}}</p>\n        \n            <p>{{friend.lastOnline}}</p>\n        </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"currentUser.friend_list.length === 0\">\n        <h3>No friends found</h3>\n    </div>    \n</div>\n\n","import { Injectable, OnInit } from \"@angular/core\";\nimport { environment } from \"src/environments/environment\";\nimport { AuthService } from \"./auth.service\";\nimport { CurrentUser } from \"./interface.model\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\n\n@Injectable({providedIn: 'root'})\n\nexport class UserService implements OnInit{\n\n    public routePrefix: string = environment.php_api_url;\n    public currentUser: CurrentUser;\n    public hasFriendsEvent = new Subject<CurrentUser[]>();\n\n    constructor(private readonly authService: AuthService, private http: HttpClient){}\n\n    public ngOnInit(): void {}\n\n    public getFriends(friends_list: string){\n        if(friends_list === null){\n            console.error('NO friends in list')\n            return;\n        }\n\n        return this.http.post(this.routePrefix + '/friend/get-friends', friends_list.split(\",\"));\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  media_api_url: 'http://localhost:4200/api/v1/',\r\n  php_api_url: 'http://localhost:8000/api/v1/',\r\n  socket_api_url: 'http://localhost:3003/api/v1/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"names":[],"sourceRoot":"webpack:///"}