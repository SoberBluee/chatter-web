{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/ethandonovan/Documents/GitHub/chatter-web/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst fs = require('graceful-fs');\n\nconst log = require('npmlog');\n\nconst path = require('path');\n\nfunction parseConfigGypi(config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, ''); // 2. join multiline strings\n\n  config = config.replace(/'$\\s+'/mg, ''); // 3. normalize string literals from ' into \"\n\n  config = config.replace(/'/g, '\"');\n  return JSON.parse(config);\n}\n\nfunction getBaseConfigGypi(_x) {\n  return _getBaseConfigGypi.apply(this, arguments);\n}\n\nfunction _getBaseConfigGypi() {\n  _getBaseConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    nodeDir\n  }) {\n    // try reading $nodeDir/include/node/config.gypi first when:\n    // 1. --dist-url or --nodedir is specified\n    // 2. and --force-process-config is not specified\n    const shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config'];\n\n    if (shouldReadConfigGypi && nodeDir) {\n      try {\n        const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi');\n        const baseConfigGypi = yield fs.promises.readFile(baseConfigGypiPath);\n        return parseConfigGypi(baseConfigGypi.toString());\n      } catch (err) {\n        log.warn('read config.gypi', err.message);\n      }\n    } // fallback to process.config if it is invalid\n\n\n    return JSON.parse(JSON.stringify(process.config));\n  });\n  return _getBaseConfigGypi.apply(this, arguments);\n}\n\nfunction getCurrentConfigGypi(_x2) {\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\n\nfunction _getCurrentConfigGypi() {\n  _getCurrentConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    nodeDir,\n    vsInfo\n  }) {\n    const config = yield getBaseConfigGypi({\n      gyp,\n      nodeDir\n    });\n\n    if (!config.target_defaults) {\n      config.target_defaults = {};\n    }\n\n    if (!config.variables) {\n      config.variables = {};\n    }\n\n    const defaults = config.target_defaults;\n    const variables = config.variables; // don't inherit the \"defaults\" from the base config.gypi.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n\n    defaults.cflags = [];\n    defaults.defines = [];\n    defaults.include_dirs = [];\n    defaults.libraries = []; // set the default_configuration prop\n\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n    }\n\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release';\n    } // set the target_arch variable\n\n\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32';\n\n    if (variables.target_arch === 'arm64') {\n      defaults.msvs_configuration_platform = 'ARM64';\n      defaults.xcode_configuration_platform = 'arm64';\n    } // set the node development directory\n\n\n    variables.nodedir = nodeDir; // disable -T \"thin\" static archives by default\n\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n\n    if (process.platform === 'win32') {\n      defaults.msbuild_toolset = vsInfo.toolset;\n\n      if (vsInfo.sdk) {\n        defaults.msvs_windows_target_platform_version = vsInfo.sdk;\n      }\n\n      if (variables.target_arch === 'arm64') {\n        if (vsInfo.versionMajor > 15 || vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9) {\n          defaults.msvs_enable_marmasm = 1;\n        } else {\n          log.warn('Compiling ARM64 assembly is only available in\\n' + 'Visual Studio 2017 version 15.9 and above');\n        }\n      }\n\n      variables.msbuild_path = vsInfo.msBuild;\n    } // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n\n\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') {\n        return;\n      }\n\n      if (opt in gyp.configDefs) {\n        return;\n      }\n\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n    });\n    return config;\n  });\n  return _getCurrentConfigGypi.apply(this, arguments);\n}\n\nfunction createConfigGypi(_x3) {\n  return _createConfigGypi.apply(this, arguments);\n}\n\nfunction _createConfigGypi() {\n  _createConfigGypi = _asyncToGenerator(function* ({\n    gyp,\n    buildDir,\n    nodeDir,\n    vsInfo\n  }) {\n    const configFilename = 'config.gypi';\n    const configPath = path.resolve(buildDir, configFilename);\n    log.verbose('build/' + configFilename, 'creating config file');\n    const config = yield getCurrentConfigGypi({\n      gyp,\n      nodeDir,\n      vsInfo\n    }); // ensures that any boolean values in config.gypi get stringified\n\n    function boolsToString(k, v) {\n      if (typeof v === 'boolean') {\n        return String(v);\n      }\n\n      return v;\n    }\n\n    log.silly('build/' + configFilename, config); // now write out the config.gypi file to the build/ dir\n\n    const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step';\n    const json = JSON.stringify(config, boolsToString, 2);\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n    yield fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'));\n    return configPath;\n  });\n  return _createConfigGypi.apply(this, arguments);\n}\n\nmodule.exports = createConfigGypi;\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n};","map":{"version":3,"sources":["/Users/ethandonovan/Documents/GitHub/chatter-web/node_modules/node-gyp/lib/create-config-gypi.js"],"names":["fs","require","log","path","parseConfigGypi","config","replace","JSON","parse","getBaseConfigGypi","gyp","nodeDir","shouldReadConfigGypi","opts","nodedir","baseConfigGypiPath","resolve","baseConfigGypi","promises","readFile","toString","err","warn","message","stringify","process","getCurrentConfigGypi","vsInfo","target_defaults","variables","defaults","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","msvs_configuration_platform","xcode_configuration_platform","standalone_static_library","thin","platform","msbuild_toolset","toolset","sdk","msvs_windows_target_platform_version","versionMajor","msvs_enable_marmasm","msbuild_path","msBuild","Object","keys","forEach","opt","configDefs","createConfigGypi","buildDir","configFilename","configPath","verbose","boolsToString","k","v","String","silly","prefix","json","writeFile","join","module","exports","test"],"mappings":"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","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst log = require('npmlog')\nconst path = require('path')\n\nfunction parseConfigGypi (config) {\n  // translated from tools/js2c.py of Node.js\n  // 1. string comments\n  config = config.replace(/#.*/g, '')\n  // 2. join multiline strings\n  config = config.replace(/'$\\s+'/mg, '')\n  // 3. normalize string literals from ' into \"\n  config = config.replace(/'/g, '\"')\n  return JSON.parse(config)\n}\n\nasync function getBaseConfigGypi ({ gyp, nodeDir }) {\n  // try reading $nodeDir/include/node/config.gypi first when:\n  // 1. --dist-url or --nodedir is specified\n  // 2. and --force-process-config is not specified\n  const shouldReadConfigGypi = (gyp.opts.nodedir || gyp.opts['dist-url']) && !gyp.opts['force-process-config']\n  if (shouldReadConfigGypi && nodeDir) {\n    try {\n      const baseConfigGypiPath = path.resolve(nodeDir, 'include/node/config.gypi')\n      const baseConfigGypi = await fs.promises.readFile(baseConfigGypiPath)\n      return parseConfigGypi(baseConfigGypi.toString())\n    } catch (err) {\n      log.warn('read config.gypi', err.message)\n    }\n  }\n\n  // fallback to process.config if it is invalid\n  return JSON.parse(JSON.stringify(process.config))\n}\n\nasync function getCurrentConfigGypi ({ gyp, nodeDir, vsInfo }) {\n  const config = await getBaseConfigGypi({ gyp, nodeDir })\n  if (!config.target_defaults) {\n    config.target_defaults = {}\n  }\n  if (!config.variables) {\n    config.variables = {}\n  }\n\n  const defaults = config.target_defaults\n  const variables = config.variables\n\n  // don't inherit the \"defaults\" from the base config.gypi.\n  // doing so could cause problems in cases where the `node` executable was\n  // compiled on a different machine (with different lib/include paths) than\n  // the machine where the addon is being built to\n  defaults.cflags = []\n  defaults.defines = []\n  defaults.include_dirs = []\n  defaults.libraries = []\n\n  // set the default_configuration prop\n  if ('debug' in gyp.opts) {\n    defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n  }\n\n  if (!defaults.default_configuration) {\n    defaults.default_configuration = 'Release'\n  }\n\n  // set the target_arch variable\n  variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n  if (variables.target_arch === 'arm64') {\n    defaults.msvs_configuration_platform = 'ARM64'\n    defaults.xcode_configuration_platform = 'arm64'\n  }\n\n  // set the node development directory\n  variables.nodedir = nodeDir\n\n  // disable -T \"thin\" static archives by default\n  variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n  if (process.platform === 'win32') {\n    defaults.msbuild_toolset = vsInfo.toolset\n    if (vsInfo.sdk) {\n      defaults.msvs_windows_target_platform_version = vsInfo.sdk\n    }\n    if (variables.target_arch === 'arm64') {\n      if (vsInfo.versionMajor > 15 ||\n          (vsInfo.versionMajor === 15 && vsInfo.versionMajor >= 9)) {\n        defaults.msvs_enable_marmasm = 1\n      } else {\n        log.warn('Compiling ARM64 assembly is only available in\\n' +\n          'Visual Studio 2017 version 15.9 and above')\n      }\n    }\n    variables.msbuild_path = vsInfo.msBuild\n  }\n\n  // loop through the rest of the opts and add the unknown ones as variables.\n  // this allows for module-specific configure flags like:\n  //\n  //   $ node-gyp configure --shared-libxml2\n  Object.keys(gyp.opts).forEach(function (opt) {\n    if (opt === 'argv') {\n      return\n    }\n    if (opt in gyp.configDefs) {\n      return\n    }\n    variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n  })\n\n  return config\n}\n\nasync function createConfigGypi ({ gyp, buildDir, nodeDir, vsInfo }) {\n  const configFilename = 'config.gypi'\n  const configPath = path.resolve(buildDir, configFilename)\n\n  log.verbose('build/' + configFilename, 'creating config file')\n\n  const config = await getCurrentConfigGypi({ gyp, nodeDir, vsInfo })\n\n  // ensures that any boolean values in config.gypi get stringified\n  function boolsToString (k, v) {\n    if (typeof v === 'boolean') {\n      return String(v)\n    }\n    return v\n  }\n\n  log.silly('build/' + configFilename, config)\n\n  // now write out the config.gypi file to the build/ dir\n  const prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n\n  const json = JSON.stringify(config, boolsToString, 2)\n  log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n  await fs.promises.writeFile(configPath, [prefix, json, ''].join('\\n'))\n\n  return configPath\n}\n\nmodule.exports = createConfigGypi\nmodule.exports.test = {\n  parseConfigGypi: parseConfigGypi,\n  getCurrentConfigGypi: getCurrentConfigGypi\n}\n"]},"metadata":{},"sourceType":"script"}